pipeline {
    environment {
        registry = "my-username/my-imagename"
        registryCredential = 'dockerhub_id'
        dockerImage = ''
        TMAS_API_KEY = credentials('TMAS_API_KEY')
        TMAS_HOME = "$WORKSPACE/tmas"
    }
    agent any
    stages {
        stage('First Clean') {
            steps {
                sh "echo $WORKSPACE/tmas"
                sh "rm -rf ./actions-test"
            }
        }
        stage('Cloning our Git') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/my-username/my-repository"
                }
            }
        }
        stage('Building our image') {
            steps {
                script {
                    // Ubicación del Dockerfile en el repositorio clonado
                    def dockerfilePath = "my-repository/Dockerfile"
                    
                    // Construir la imagen Docker utilizando el Dockerfile del repositorio clonado
                    dockerImage = docker.build("${registry}:${BUILD_NUMBER}", "-f ${dockerfilePath} .")
                }
            }
        }

        stage('Install TMAS') {
            steps {
                // Crear el directorio de instalación de TMAS
                sh "mkdir -p $TMAS_HOME"
                
                // Descargar y descomprimir TMAS en el directorio de instalación
                sh "curl -L https://cli.artifactscan.cloudone.trendmicro.com/tmas-cli/latest/tmas-cli_Linux_x86_64.tar.gz | tar xz -C $TMAS_HOME"
            }
        }
        stage('Scan with TMAS') {
            steps {
                // Ejecutar el escaneo con TMAS
                sh "$TMAS_HOME/tmas scan registry:username/my-imagename:latest --region us-1"
            }
        }
        
        stage('Deploy our image') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Cleaning up') {
            steps {
                script {
                    // Limpiar la imagen construida localmente
                    sh "docker rmi ${registry}:${BUILD_NUMBER}"
                }
            }
        }
    }
}
